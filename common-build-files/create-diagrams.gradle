import groovy.json.JsonSlurper
import com.mitra.xmlvisualiser.XmlVisualiser

buildscript {
  repositories {
    mavenLocal()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    maven { url 'https://plugins.gradle.org/m2' }
  }
  dependencies {
    classpath "gradle.plugin.com.github.mgk.gradle:s3:1.4.0"
    classpath "com.mitra.xmlvisualiser:xml-visualiser:1.11"
  }
}

apply plugin: com.github.mgk.gradle.S3Plugin

import com.github.mgk.gradle.*

task uploadFile0() {
  outputs.upToDateWhen { false }
}

def getProjectProperty(property ) {
    if (project.hasProperty(property)) {
        return project.getProperty(property)
    } else {
        println("Property $property must be specified")
    }
}

def name = getProjectProperty("projectName" )
def path = "./$name-esb/src/main/synapse-config"

project.ext {
  bucket = 'pipe-midw-'+System.getenv("VPC")+'-jenkins'
}

task create() {

  doFirst {

    def ds = new File("./diagrams/$name/sequences")
    ds.mkdirs()
    def da = new File("./diagrams/$name/apis")
    da.mkdirs()
    def p = new File("./diagrams/$name/proxy-services")
    p.mkdirs()
    def ia = new File("./diagrams/$name/inbound-endpoints")
    ia.mkdirs()

    createDiagrams(name, path)
  }
}

if (project.hasProperty("generateUploadTasks")) {
  def lastIndex = scanDirectory(name, "../diagrams", file("../diagrams").getAbsolutePath(), 1)

  task "uploadFile$lastIndex" {
    outputs.upToDateWhen { false }

    doLast {
      println "*** Upload of results finished"
    }
  }
}

def createDiagrams(name, path) {

  def dotcommand = "./common-build-files/dot_static -Tsvg -odiagrams/$name/\${inputFile}.gv.svg \${inputPath}/\${inputFile}.gv"

  def xmlVisualiser = new XmlVisualiser((String[])["-s",
    "-c",
    dotcommand,
    "-g",
    name,
    "-i",
    path,
    "-p",
    "gov:../../../../$name-greg/prod",
    "-p",
    "gov:../../../../$name-greg/pipeline",
    "-p",
    "gov:../../../../$name-greg/endpoints/prod",
    "-p",
    "gov:../../../../$name-greg/endpoints/pipeline",
    "-o",
    path])
  xmlVisualiser.scan()
}

def scanDirectory(name, path, root, index) {

  def files = files { file("$path").listFiles() }

  files.each {

    def itString = it.toString()
    def targetPath = itString.replace(root,"")

    if (it.isDirectory()) {
      index = scanDirectory(name, itString, root, index)
    } else {

      if (itString.endsWith(".svg")) {

        def nextIndex = index + 1

        task "uploadFile$index"(type: S3Upload) {
          outputs.upToDateWhen { false }

          bucket = project.ext.bucket
          key = "diagrams$targetPath"
          file = "$itString"
          overwrite = true

          finalizedBy "uploadFile$nextIndex"
        }

        index++
      }
    }
  }

  return index
}
